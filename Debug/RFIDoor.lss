
RFIDoor.elf: formato do arquivo elf32-avr

Seções:
Idx Tamanho do Nome do Arquivo VMA LMA sem Algn
  0 .data         00000002  00800100  00000212  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000212  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000002a8  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f01  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001f41  2**0
                  CONTENTS, READONLY

Desmontagem da seção .text:

00000000 <__vectors>:
   0:	34 c0       	rjmp	.+104    	; 0x6a <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
	...

00000068 <__ctors_start>:
  68:	f5 00       	.word	0x00f5	; ????

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e2 e1       	ldi	r30, 0x12	; 18
  7e:	f2 e0       	ldi	r31, 0x02	; 2
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a2 30       	cpi	r26, 0x02	; 2
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a2 e0       	ldi	r26, 0x02	; 2
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a4 30       	cpi	r26, 0x04	; 4
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	ca e6       	ldi	r28, 0x6A	; 106
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	03 c0       	rjmp	.+6      	; 0xaa <__do_global_ctors+0xe>
  a4:	22 97       	sbiw	r28, 0x02	; 2
  a6:	fe 01       	movw	r30, r28
  a8:	ae d0       	rcall	.+348    	; 0x206 <__tablejump__>
  aa:	c8 36       	cpi	r28, 0x68	; 104
  ac:	d1 07       	cpc	r29, r17
  ae:	d1 f7       	brne	.-12     	; 0xa4 <__do_global_ctors+0x8>
  b0:	5e d0       	rcall	.+188    	; 0x16e <main>
  b2:	ad c0       	rjmp	.+346    	; 0x20e <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <_Z5setupv>:
char pin_bot = 4;
const unsigned char bot_mask = (1 << pin_bot);

unsigned long tempo = 1000;

void setup() {
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
	DDRB = (DDRB | led_mask) & ~bot_mask;
  be:	84 e2       	ldi	r24, 0x24	; 36
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	24 e2       	ldi	r18, 0x24	; 36
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	f9 01       	movw	r30, r18
  c8:	30 81       	ld	r19, Z
  ca:	20 91 02 01 	lds	r18, 0x0102
  ce:	23 2b       	or	r18, r19
  d0:	32 2f       	mov	r19, r18
  d2:	20 91 03 01 	lds	r18, 0x0103
  d6:	20 95       	com	r18
  d8:	23 23       	and	r18, r19
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <_Z9ler_botaov>:

bool ler_botao() {
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
	return (PINB & bot_mask);
  ec:	83 e2       	ldi	r24, 0x23	; 35
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	fc 01       	movw	r30, r24
  f2:	90 81       	ld	r25, Z
  f4:	80 91 03 01 	lds	r24, 0x0103
  f8:	98 23       	and	r25, r24
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	99 23       	and	r25, r25
  fe:	09 f4       	brne	.+2      	; 0x102 <_Z9ler_botaov+0x1e>
 100:	80 e0       	ldi	r24, 0x00	; 0
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <_Z10acende_ledv>:

void acende_led() {
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	PORTB = PORTB | led_mask; //acende
 110:	85 e2       	ldi	r24, 0x25	; 37
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	25 e2       	ldi	r18, 0x25	; 37
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	30 81       	ld	r19, Z
 11c:	20 91 02 01 	lds	r18, 0x0102
 120:	23 2b       	or	r18, r19
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <_Z9apaga_ledv>:

void apaga_led() {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
	PORTB = PORTB & ~led_mask; //apaga
 134:	85 e2       	ldi	r24, 0x25	; 37
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	25 e2       	ldi	r18, 0x25	; 37
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	f9 01       	movw	r30, r18
 13e:	20 81       	ld	r18, Z
 140:	32 2f       	mov	r19, r18
 142:	20 91 02 01 	lds	r18, 0x0102
 146:	20 95       	com	r18
 148:	23 23       	and	r18, r19
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <_Z4loopv>:
	apaga_led();
	_delay_ms(tempo);
}*/

//loop botao_led
void loop() {
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
	if(ler_botao()) {
 15c:	c3 df       	rcall	.-122    	; 0xe4 <_Z9ler_botaov>
 15e:	88 23       	and	r24, r24
 160:	11 f0       	breq	.+4      	; 0x166 <_Z4loopv+0x12>
 162:	d2 df       	rcall	.-92     	; 0x108 <_Z10acende_ledv>
		//printf("Acendendo LED...\n");
		acende_led();
 164:	01 c0       	rjmp	.+2      	; 0x168 <_Z4loopv+0x14>
 166:	e2 df       	rcall	.-60     	; 0x12c <_Z9apaga_ledv>
 168:	df 91       	pop	r29
	}
	else {
		//printf("Apagando LED...\n");
		apaga_led();
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <main>:
	}
}

int main() {
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
	setup();
 176:	9f df       	rcall	.-194    	; 0xb6 <_Z5setupv>
 178:	ed df       	rcall	.-38     	; 0x154 <_Z4loopv>
	while (true)
		loop();
 17a:	fe cf       	rjmp	.-4      	; 0x178 <main+0xa>

0000017c <_Z41__static_initialization_and_destruction_0ii>:
}
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	00 d0       	rcall	.+0      	; 0x182 <_Z41__static_initialization_and_destruction_0ii+0x6>
 182:	00 d0       	rcall	.+0      	; 0x184 <_Z41__static_initialization_and_destruction_0ii+0x8>
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	9a 83       	std	Y+2, r25	; 0x02
 18a:	89 83       	std	Y+1, r24	; 0x01
 18c:	7c 83       	std	Y+4, r23	; 0x04
 18e:	6b 83       	std	Y+3, r22	; 0x03
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	9a 81       	ldd	r25, Y+2	; 0x02
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	91 05       	cpc	r25, r1
 198:	09 f5       	brne	.+66     	; 0x1dc <_Z41__static_initialization_and_destruction_0ii+0x60>
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	9c 81       	ldd	r25, Y+4	; 0x04
 19e:	8f 3f       	cpi	r24, 0xFF	; 255
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	92 07       	cpc	r25, r18
 1a4:	d9 f4       	brne	.+54     	; 0x1dc <_Z41__static_initialization_and_destruction_0ii+0x60>
#include <util/delay.h>
#include <avr/io.h>
#include <stdio.h>

char pin_led = 3;
const unsigned char led_mask = (1 << pin_led);
 1a6:	80 91 00 01 	lds	r24, 0x0100
 1aa:	28 2f       	mov	r18, r24
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	2a 95       	dec	r18
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 1bc:	80 93 02 01 	sts	0x0102, r24

char pin_bot = 4;
const unsigned char bot_mask = (1 << pin_bot);
 1c0:	80 91 01 01 	lds	r24, 0x0101
 1c4:	28 2f       	mov	r18, r24
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 2e       	mov	r0, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <_Z41__static_initialization_and_destruction_0ii+0x58>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	0a 94       	dec	r0
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <_Z41__static_initialization_and_destruction_0ii+0x54>
 1d8:	80 93 03 01 	sts	0x0103, r24

int main() {
	setup();
	while (true)
		loop();
}
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <_GLOBAL__sub_I_pin_led>:
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	6f ef       	ldi	r22, 0xFF	; 255
 1f4:	7f ef       	ldi	r23, 0xFF	; 255
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	c0 df       	rcall	.-128    	; 0x17c <_Z41__static_initialization_and_destruction_0ii>
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <__tablejump2__>:
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31

00000206 <__tablejump__>:
 206:	05 90       	lpm	r0, Z+
 208:	f4 91       	lpm	r31, Z
 20a:	e0 2d       	mov	r30, r0
 20c:	09 94       	ijmp

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
