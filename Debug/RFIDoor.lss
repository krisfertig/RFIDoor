
RFIDoor.elf: formato do arquivo elf32-avr

Seções:
Idx Tamanho do Nome do Arquivo VMA LMA sem Algn
  0 .data         00000002  00800100  00000402  00000496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000402  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800102  00800102  00000498  2**0
                  ALLOC
  3 .stab         000013c8  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001437  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002c97  2**0
                  CONTENTS, READONLY

Desmontagem da seção .text:

00000000 <__vectors>:
   0:	35 c0       	rjmp	.+106    	; 0x6c <__dtors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
	...

00000068 <__ctors_start>:
  68:	b5 01       	movw	r22, r10

0000006a <__ctors_end>:
  6a:	c1 01       	movw	r24, r2

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e2 e0       	ldi	r30, 0x02	; 2
  80:	f4 e0       	ldi	r31, 0x04	; 4
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a2 30       	cpi	r26, 0x02	; 2
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	11 e0       	ldi	r17, 0x01	; 1
  90:	a2 e0       	ldi	r26, 0x02	; 2
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	ac 30       	cpi	r26, 0x0C	; 12
  9a:	b1 07       	cpc	r27, r17
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	ca e6       	ldi	r28, 0x6A	; 106
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	03 c0       	rjmp	.+6      	; 0xac <__do_global_ctors+0xe>
  a6:	22 97       	sbiw	r28, 0x02	; 2
  a8:	fe 01       	movw	r30, r28
  aa:	9b d1       	rcall	.+822    	; 0x3e2 <__tablejump__>
  ac:	c8 36       	cpi	r28, 0x68	; 104
  ae:	d1 07       	cpc	r29, r17
  b0:	d1 f7       	brne	.-12     	; 0xa6 <__do_global_ctors+0x8>
  b2:	02 d1       	rcall	.+516    	; 0x2b8 <main>
  b4:	9a c1       	rjmp	.+820    	; 0x3ea <__do_global_dtors>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <_ZN4UARTC1Eiiii>:
 */

#include "UART.h"
#include <avr/io.h>

UART::UART(int br, int db, int pr, int sb)
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	2e 97       	sbiw	r28, 0x0e	; 14
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
  d0:	9a 83       	std	Y+2, r25	; 0x02
  d2:	89 83       	std	Y+1, r24	; 0x01
  d4:	7c 83       	std	Y+4, r23	; 0x04
  d6:	6b 83       	std	Y+3, r22	; 0x03
  d8:	5e 83       	std	Y+6, r21	; 0x06
  da:	4d 83       	std	Y+5, r20	; 0x05
  dc:	38 87       	std	Y+8, r19	; 0x08
  de:	2f 83       	std	Y+7, r18	; 0x07
  e0:	1a 87       	std	Y+10, r17	; 0x0a
  e2:	09 87       	std	Y+9, r16	; 0x09
//inicialização padrão dos parâmetros/atributos
: _baudrate(br),
  _databits(db),
  _parity(pr),
  _stopbits(sb)
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	9a 81       	ldd	r25, Y+2	; 0x02
  e8:	2b 81       	ldd	r18, Y+3	; 0x03
  ea:	3c 81       	ldd	r19, Y+4	; 0x04
  ec:	fc 01       	movw	r30, r24
  ee:	31 83       	std	Z+1, r19	; 0x01
  f0:	20 83       	st	Z, r18
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	9a 81       	ldd	r25, Y+2	; 0x02
  f6:	2d 81       	ldd	r18, Y+5	; 0x05
  f8:	3e 81       	ldd	r19, Y+6	; 0x06
  fa:	fc 01       	movw	r30, r24
  fc:	33 83       	std	Z+3, r19	; 0x03
  fe:	22 83       	std	Z+2, r18	; 0x02
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	9a 81       	ldd	r25, Y+2	; 0x02
 104:	2f 81       	ldd	r18, Y+7	; 0x07
 106:	38 85       	ldd	r19, Y+8	; 0x08
 108:	fc 01       	movw	r30, r24
 10a:	35 83       	std	Z+5, r19	; 0x05
 10c:	24 83       	std	Z+4, r18	; 0x04
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	9a 81       	ldd	r25, Y+2	; 0x02
 112:	29 85       	ldd	r18, Y+9	; 0x09
 114:	3a 85       	ldd	r19, Y+10	; 0x0a
 116:	fc 01       	movw	r30, r24
 118:	37 83       	std	Z+7, r19	; 0x07
 11a:	26 83       	std	Z+6, r18	; 0x06
{
	UBRR0 = F_CPU / (16ul *_baudrate) - 1;
 11c:	04 ec       	ldi	r16, 0xC4	; 196
 11e:	10 e0       	ldi	r17, 0x00	; 0
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	9a 81       	ldd	r25, Y+2	; 0x02
 124:	fc 01       	movw	r30, r24
 126:	80 81       	ld	r24, Z
 128:	91 81       	ldd	r25, Z+1	; 0x01
 12a:	aa 27       	eor	r26, r26
 12c:	97 fd       	sbrc	r25, 7
 12e:	a0 95       	com	r26
 130:	ba 2f       	mov	r27, r26
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	aa 1f       	adc	r26, r26
 138:	bb 1f       	adc	r27, r27
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	aa 1f       	adc	r26, r26
 140:	bb 1f       	adc	r27, r27
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	aa 1f       	adc	r26, r26
 148:	bb 1f       	adc	r27, r27
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	aa 1f       	adc	r26, r26
 150:	bb 1f       	adc	r27, r27
 152:	9c 01       	movw	r18, r24
 154:	ad 01       	movw	r20, r26
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	94 e2       	ldi	r25, 0x24	; 36
 15a:	a4 ef       	ldi	r26, 0xF4	; 244
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	bc 01       	movw	r22, r24
 160:	cd 01       	movw	r24, r26
 162:	1b d1       	rcall	.+566    	; 0x39a <__udivmodsi4>
 164:	da 01       	movw	r26, r20
 166:	c9 01       	movw	r24, r18
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f8 01       	movw	r30, r16
 16c:	91 83       	std	Z+1, r25	; 0x01
 16e:	80 83       	st	Z, r24
 170:	81 ec       	ldi	r24, 0xC1	; 193

	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	28 e1       	ldi	r18, 0x18	; 24
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
 17a:	82 ec       	ldi	r24, 0xC2	; 194

	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (3<<UCSZ00);
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	26 e0       	ldi	r18, 0x06	; 6
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
 184:	2e 96       	adiw	r28, 0x0e	; 14
}
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	08 95       	ret

0000019a <_ZN4UARTD1Ev>:

UART::~UART() {
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <_ZN4UARTD1Ev+0x6>
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
 1a4:	9a 83       	std	Y+2, r25	; 0x02
 1a6:	89 83       	std	Y+1, r24	; 0x01
	// TODO Auto-generated destructor stub
}
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <_ZN4UART3putEh>:

void UART::put(unsigned char data) {
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <_ZN4UART3putEh+0x6>
 1b8:	1f 92       	push	r1
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	9a 83       	std	Y+2, r25	; 0x02
 1c0:	89 83       	std	Y+1, r24	; 0x01
 1c2:	6b 83       	std	Y+3, r22	; 0x03

	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 1c4:	00 00       	nop
 1c6:	80 ec       	ldi	r24, 0xC0	; 192
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	80 81       	ld	r24, Z
 1ce:	88 2f       	mov	r24, r24
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	80 72       	andi	r24, 0x20	; 32
 1d4:	99 27       	eor	r25, r25
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	00 97       	sbiw	r24, 0x00	; 0
 1da:	09 f0       	breq	.+2      	; 0x1de <_ZN4UART3putEh+0x2c>
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	22 23       	and	r18, r18
 1e0:	91 f7       	brne	.-28     	; 0x1c6 <_ZN4UART3putEh+0x14>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 1e2:	86 ec       	ldi	r24, 0xC6	; 198
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	2b 81       	ldd	r18, Y+3	; 0x03
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
}
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <_Z5setupv>:

unsigned long tempo = 1000;

UART uart;

void setup() {
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62

	DDRB = (DDRB | led_mask) & ~bot_mask;
 200:	84 e2       	ldi	r24, 0x24	; 36
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	24 e2       	ldi	r18, 0x24	; 36
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	f9 01       	movw	r30, r18
 20a:	30 81       	ld	r19, Z
 20c:	20 91 02 01 	lds	r18, 0x0102
 210:	23 2b       	or	r18, r19
 212:	32 2f       	mov	r19, r18
 214:	20 91 03 01 	lds	r18, 0x0103
 218:	20 95       	com	r18
 21a:	23 23       	and	r18, r19
 21c:	fc 01       	movw	r30, r24
 21e:	20 83       	st	Z, r18
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <_Z9ler_botaov>:

bool ler_botao() {
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
	return (PINB & bot_mask);
 22e:	83 e2       	ldi	r24, 0x23	; 35
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	fc 01       	movw	r30, r24
 234:	90 81       	ld	r25, Z
 236:	80 91 03 01 	lds	r24, 0x0103
 23a:	98 23       	and	r25, r24
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	99 23       	and	r25, r25
 240:	09 f4       	brne	.+2      	; 0x244 <_Z9ler_botaov+0x1e>
 242:	80 e0       	ldi	r24, 0x00	; 0
}
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <_Z10acende_ledv>:

void acende_led() {
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
	PORTB = PORTB | led_mask; //acende
 252:	85 e2       	ldi	r24, 0x25	; 37
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	25 e2       	ldi	r18, 0x25	; 37
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	f9 01       	movw	r30, r18
 25c:	30 81       	ld	r19, Z
 25e:	20 91 02 01 	lds	r18, 0x0102
 262:	23 2b       	or	r18, r19
 264:	fc 01       	movw	r30, r24
 266:	20 83       	st	Z, r18
}
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <_Z9apaga_ledv>:

void apaga_led() {
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
	PORTB = PORTB & ~led_mask; //apaga
 276:	85 e2       	ldi	r24, 0x25	; 37
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	25 e2       	ldi	r18, 0x25	; 37
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	f9 01       	movw	r30, r18
 280:	20 81       	ld	r18, Z
 282:	32 2f       	mov	r19, r18
 284:	20 91 02 01 	lds	r18, 0x0102
 288:	20 95       	com	r18
 28a:	23 23       	and	r18, r19
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <_Z4loopv>:
	apaga_led();
	_delay_ms(tempo);
}*/

//loop botao_led
void loop() {
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
	uart.put('a');
 29e:	61 e6       	ldi	r22, 0x61	; 97
 2a0:	84 e0       	ldi	r24, 0x04	; 4
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	86 df       	rcall	.-244    	; 0x1b2 <_ZN4UART3putEh>
 2a6:	bf df       	rcall	.-130    	; 0x226 <_Z9ler_botaov>
	if(ler_botao()) {
 2a8:	88 23       	and	r24, r24
 2aa:	11 f0       	breq	.+4      	; 0x2b0 <_Z4loopv+0x1a>
 2ac:	ce df       	rcall	.-100    	; 0x24a <_Z10acende_ledv>
 2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <_Z4loopv+0x1c>
		//printf("Acendendo LED...\n");
		acende_led();
 2b0:	de df       	rcall	.-68     	; 0x26e <_Z9apaga_ledv>
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
	}
	else {
		//printf("Apagando LED...\n");
		apaga_led();
 2b6:	08 95       	ret

000002b8 <main>:
	}
}

int main() {
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
	setup();
 2c0:	9b df       	rcall	.-202    	; 0x1f8 <_Z5setupv>
 2c2:	e9 df       	rcall	.-46     	; 0x296 <_Z4loopv>
	while (true)
		loop();
 2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <main+0xa>

000002c6 <_Z41__static_initialization_and_destruction_0ii>:
}
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	00 d0       	rcall	.+0      	; 0x2d0 <_Z41__static_initialization_and_destruction_0ii+0xa>
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <_Z41__static_initialization_and_destruction_0ii+0xc>
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	9a 83       	std	Y+2, r25	; 0x02
 2d8:	89 83       	std	Y+1, r24	; 0x01
 2da:	7c 83       	std	Y+4, r23	; 0x04
 2dc:	6b 83       	std	Y+3, r22	; 0x03
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	9a 81       	ldd	r25, Y+2	; 0x02
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	91 05       	cpc	r25, r1
 2e6:	59 f5       	brne	.+86     	; 0x33e <_Z41__static_initialization_and_destruction_0ii+0x78>
 2e8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ea:	9c 81       	ldd	r25, Y+4	; 0x04
 2ec:	8f 3f       	cpi	r24, 0xFF	; 255
 2ee:	2f ef       	ldi	r18, 0xFF	; 255
 2f0:	92 07       	cpc	r25, r18
 2f2:	29 f5       	brne	.+74     	; 0x33e <_Z41__static_initialization_and_destruction_0ii+0x78>
#include <avr/io.h>
#include <stdio.h>
#include "UART.h"

char pin_led = 3;
const unsigned char led_mask = (1 << pin_led);
 2f4:	80 91 00 01 	lds	r24, 0x0100
 2f8:	28 2f       	mov	r18, r24
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <_Z41__static_initialization_and_destruction_0ii+0x40>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	2a 95       	dec	r18
 308:	e2 f7       	brpl	.-8      	; 0x302 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 30a:	80 93 02 01 	sts	0x0102, r24

char pin_bot = 4;
const unsigned char bot_mask = (1 << pin_bot);
 30e:	80 91 01 01 	lds	r24, 0x0101
 312:	28 2f       	mov	r18, r24
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	2a 95       	dec	r18
 322:	e2 f7       	brpl	.-8      	; 0x31c <_Z41__static_initialization_and_destruction_0ii+0x56>
 324:	80 93 03 01 	sts	0x0103, r24

unsigned long tempo = 1000;

UART uart;
 328:	01 e0       	ldi	r16, 0x01	; 1
 32a:	10 e0       	ldi	r17, 0x00	; 0
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	48 e0       	ldi	r20, 0x08	; 8
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	7b e4       	ldi	r23, 0x4B	; 75
 338:	84 e0       	ldi	r24, 0x04	; 4
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	bd de       	rcall	.-646    	; 0xb8 <_ZN4UARTC1Eiiii>
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	9a 81       	ldd	r25, Y+2	; 0x02
 342:	00 97       	sbiw	r24, 0x00	; 0
 344:	49 f4       	brne	.+18     	; 0x358 <_Z41__static_initialization_and_destruction_0ii+0x92>
 346:	8b 81       	ldd	r24, Y+3	; 0x03
 348:	9c 81       	ldd	r25, Y+4	; 0x04
 34a:	8f 3f       	cpi	r24, 0xFF	; 255
 34c:	2f ef       	ldi	r18, 0xFF	; 255
 34e:	92 07       	cpc	r25, r18
 350:	19 f4       	brne	.+6      	; 0x358 <_Z41__static_initialization_and_destruction_0ii+0x92>
 352:	84 e0       	ldi	r24, 0x04	; 4
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	21 df       	rcall	.-446    	; 0x19a <_ZN4UARTD1Ev>
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0

int main() {
	setup();
	while (true)
		loop();
}
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	08 95       	ret

0000036a <_GLOBAL__sub_I_pin_led>:
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
 372:	6f ef       	ldi	r22, 0xFF	; 255
 374:	7f ef       	ldi	r23, 0xFF	; 255
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	a5 df       	rcall	.-182    	; 0x2c6 <_Z41__static_initialization_and_destruction_0ii>
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <_GLOBAL__sub_D_pin_led>:
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	6f ef       	ldi	r22, 0xFF	; 255
 38c:	7f ef       	ldi	r23, 0xFF	; 255
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	99 df       	rcall	.-206    	; 0x2c6 <_Z41__static_initialization_and_destruction_0ii>
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <__udivmodsi4>:
 39a:	a1 e2       	ldi	r26, 0x21	; 33
 39c:	1a 2e       	mov	r1, r26
 39e:	aa 1b       	sub	r26, r26
 3a0:	bb 1b       	sub	r27, r27
 3a2:	fd 01       	movw	r30, r26
 3a4:	0d c0       	rjmp	.+26     	; 0x3c0 <__udivmodsi4_ep>

000003a6 <__udivmodsi4_loop>:
 3a6:	aa 1f       	adc	r26, r26
 3a8:	bb 1f       	adc	r27, r27
 3aa:	ee 1f       	adc	r30, r30
 3ac:	ff 1f       	adc	r31, r31
 3ae:	a2 17       	cp	r26, r18
 3b0:	b3 07       	cpc	r27, r19
 3b2:	e4 07       	cpc	r30, r20
 3b4:	f5 07       	cpc	r31, r21
 3b6:	20 f0       	brcs	.+8      	; 0x3c0 <__udivmodsi4_ep>
 3b8:	a2 1b       	sub	r26, r18
 3ba:	b3 0b       	sbc	r27, r19
 3bc:	e4 0b       	sbc	r30, r20
 3be:	f5 0b       	sbc	r31, r21

000003c0 <__udivmodsi4_ep>:
 3c0:	66 1f       	adc	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	88 1f       	adc	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	1a 94       	dec	r1
 3ca:	69 f7       	brne	.-38     	; 0x3a6 <__udivmodsi4_loop>
 3cc:	60 95       	com	r22
 3ce:	70 95       	com	r23
 3d0:	80 95       	com	r24
 3d2:	90 95       	com	r25
 3d4:	9b 01       	movw	r18, r22
 3d6:	ac 01       	movw	r20, r24
 3d8:	bd 01       	movw	r22, r26
 3da:	cf 01       	movw	r24, r30
 3dc:	08 95       	ret

000003de <__tablejump2__>:
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31

000003e2 <__tablejump__>:
 3e2:	05 90       	lpm	r0, Z+
 3e4:	f4 91       	lpm	r31, Z
 3e6:	e0 2d       	mov	r30, r0
 3e8:	09 94       	ijmp

000003ea <__do_global_dtors>:
 3ea:	10 e0       	ldi	r17, 0x00	; 0
 3ec:	ca e6       	ldi	r28, 0x6A	; 106
 3ee:	d0 e0       	ldi	r29, 0x00	; 0
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <__do_global_dtors+0xe>
 3f2:	fe 01       	movw	r30, r28
 3f4:	f6 df       	rcall	.-20     	; 0x3e2 <__tablejump__>
 3f6:	22 96       	adiw	r28, 0x02	; 2
 3f8:	cc 36       	cpi	r28, 0x6C	; 108
 3fa:	d1 07       	cpc	r29, r17
 3fc:	d1 f7       	brne	.-12     	; 0x3f2 <__do_global_dtors+0x8>
 3fe:	f8 94       	cli

00000400 <__stop_program>:
 400:	ff cf       	rjmp	.-2      	; 0x400 <__stop_program>
